/*
 * ImageSpecial.c
  *  赛道上各种特殊元素的判断
 *  Created on: 2022年1月17日
 *      Author: yue
 */

#include "ImageSpecial.h"

/*
 *******************************************************************************************
 ** 函数功能: 检测是否有起跑线
 ** 参    数:
 ** 返 回 值: 无
 ** 作    者: WBN
 ** 注    意：1 . 默认在进行起跑线识别的路段都是直线，即车头已经摆正
 **           2.由于没有实物图做参考，只能先假设一个理想状态：整条起跑线恰好布满整个图像
 ********************************************************************************************
 */
void StartLineFlag(Point InflectionL,Point InflectionR)
{
    //在这里加入一个判断：检测到左方或右方有拐点时，再进行是否有起跑线的判断
    //并且扫线的位置根据拐点决定。从左下拐点开始：下-上，左-右扫线；从右下拐点开始：下-上，右-左扫线

    int row,cloum;          //行,列
    int Black_width=0;      //固定行，横向扫线是记录每段黑点的个数（即一条黑线的宽度）
    int Black_num=0;        //记录行黑线的数量，作为判断该行是否为斑马线的依据
    int Black_times=0;      //记录满足斑马线的行数，并作为判断该路段是否为斑马线的依据

    if()    //拐点（车库）在左边
    {
        for(row=InflectionL.X,cloum=InflectionL.Y;row<MT9V03X_H;row++)        //从左拐点开始固定列，从下往上扫
        {
            if(BinaryImage[row][cloum]==IMAGE_BLACK)    //找到了一个黑点
            {
                for(;cloum<MT9V03X_W;cloum++)                                 //固定行，从左往右扫
                {
                    if(BinaryImage[row][cloum]==IMAGE_BLACK)    //扫到黑点
                    {
                        Black_width++;   //黑线宽度+1
                    }
                    else                                        //扫到白点
                    {
                        if(Black_width>=BLACK_WIDTH)    //判断黑线宽度是否满足阈值
                        {
                            Black_num++; //黑线数量+1
                        }
                        Black_width=0;   //一次判断后重置黑线宽度
                    }
                    if(Black_num>=BLACK_NUM)    //若满足斑马线的阈值（这一行）
                    {
                        Black_times++;
                        break;
                    }
                }
                Black_num=0;    //这一行的扫线结束，重置行黑线数
            }
            if(Black_times>=BLACK_TIMES)    //判断是否满足斑马线路段的阈值
            {
                /*
                 * *这里得出该路段是斑马线的结果
                 * */
                break;
            }
        }
    }

}
